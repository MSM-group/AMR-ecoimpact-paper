signif(as.numeric(p_adj), digits = 3)
View(sig_genes_types)
sig_gene_types<- sig_genes_types %>%
round(as.numeric(p_adj), digits = 3)
sig_gene_types<- sig_genes_types %>%
round(p_adj, digits = 3)
round(p_adj$sig_genes_types, digits = 3)
#changing lables
sig_genes_types_mod <- sig_genes_types %>%
mutate(contig_mod = recode(contig,
"k121_858589_5" = "Beta-lactam",
"k121_252136_5" = "Beta-lactam",
"k121_1269806_2" = "Beta-lactam",
"k121_895379_1" = "Other",
"k121_1259309_2" = "Other",
"k121_1519353_3" = "Other",
"k121_660679_2" = "Other",
"k121_68825_2" = "Aminoglycoside",
"k121_906279_2" = "Multidrug",
"k121_671215_2" = "Macrolide-Lincomide-Streptogramin")) %>%
dplyr::mutate(sample_perc = forcats::fct_relevel(condition, c("WW00", "WW10",
"WW30", "WW80",
"WW30UF", "WW80UF")))
contig_type <- c("k121_858589_5" = "Beta-lactam1",
"k121_252136_5" = "Beta-lactam2",
"k121_1269806_2" = "Beta-lactam3",
"k121_895379_1" = "Other1",
"k121_1259309_2" = "Other2",
"k121_1519353_3" = "Other3",
"k121_660679_2" = "Other4",
"k121_68825_2" = "Aminoglycoside",
"k121_906279_2" = "Multidrug",
"k121_671215_2" = "MLS")
sig_genes_types_mod2 <- sig_genes_types_mod %>%
filter(experiment == 2)%>%
mutate(contig_mod = recode(contig,
"k121_858589_5" = "Beta-lactam 1",
"k121_252136_5" = "Beta-lactam 2",
"k121_1269806_2" = "Beta-lactam 3",
"k121_895379_1" = "Other1",
"k121_1259309_2" = "Other2",
"k121_1519353_3" = "Other3",
"k121_660679_2" = "Other4",
"k121_68825_2" = "Aminoglycoside",
"k121_906279_2" = "Multidrug",
"k121_671215_2" = "Macrolide-Lincomide-Streptogramin")) %>%
dplyr::mutate(sample_perc = forcats::fct_relevel(sample_perc, c("WW00", "WW30",
"WW80", "WW30UF",
"WW80UF"))) %>%
dplyr::mutate(corrected_reads= normalized_reads+1)
sig_genes_types_mod3 <- sig_genes_types_mod2 %>%
filter(contig_mod %in% c("Beta-lactam 1", "Beta-lactam 2", "Beta-lactam 3", "Aminoglycoside", "Multidrug",
"Macrolide-Lincomide-Streptogramin")) %>%
dplyr::mutate(contig_mod = forcats::fct_relevel(contig_mod, c("Beta-lactam 1",
"Beta-lactam 2",
"Beta-lactam 3",
"Aminoglycoside",
"Multidrug",
"Macrolide-Lincomide-Streptogramin")))
plot1<- ggplot(sig_genes_types_mod3, aes(x= sample_perc, y= as.numeric(corrected_reads),
fill = sample_perc))+
geom_boxplot() +
geom_jitter(aes(x = sample_perc, as.numeric(corrected_reads), fill = sample_perc, color= sample_perc)) +
scale_colour_manual(guide = "none", values = c("WW00"="#93D5E7",
"WW30"="#EFEAB7",
"WW80"="#EAA67B",
"WW30UF"="#D4BF99",
"WW80UF"="#CA9A81"))+
scale_fill_manual(name = NULL, values = c("WW00"="#93D5E7",
"WW30"="#EFEAB7",
"WW80"="#EAA67B",
"WW30UF"="#D4BF99",
"WW80UF"="#CA9A81"),
labels=c("WW00" = "0% WW",
"WW30" = "30% WW",
"WW80" = "80% WW",
"WW30UF" = "30% WW UF",
"WW80UF" = "80% WW UF"))+
scale_x_discrete(labels=c("WW00" = "0% WW",
"WW30" = "30% WW",
"WW80" = "80% WW",
"WW30UF" = "30% WW UF",
"WW80UF" = "80% WW UF"))+
theme_pubr() +
facet_wrap(vars(contig_mod), scales = "free_y", nrow = 2, ncol = 3) +
labs(x = "Condition", y = "Normalized average coverage (corrected +1)")+
theme(legend.position= "bottom",
legend.spacing= unit(5, 'mm'),
legend.key.size = unit(5, 'mm'),
legend.text = element_text(size=10),
legend.title = element_text(size=10, face="bold"),
axis.title=element_text(size=9,face="bold"),
axis.text.x = element_text(face="plain", size=8, colour = "black", angle = 45, hjust = 1),
axis.text.y = element_text(face="plain", size=8, colour = "black"),
strip.text = element_text(size=8, face="bold"))
ggsave("paper_figures/figure5.png", plot1,
device= "png", units= c("mm"), height = 120, width = 190, dpi = 500)
#clear_environment
rm(list = ls())
#load required packages
library(pacman)
pacman::p_load("tidyverse", "readxl", "vegan", "ggpubr","janitor", "ape", "edgeR")
#color palette
colors <- c(rgb(100/255, 170/255, 112/255),
rgb(119/255, 106/255, 105/255),
rgb(210/255, 208/255, 213/255),
rgb(147/255, 213/255, 231/255),
rgb(239/255, 234/255, 183/255),
rgb(234/255, 166/255, 123/255),
rgb(212/255, 191/255, 153/255),
rgb(202/255, 154/255, 129/255))
#import mtags genus level data
mtags_in <- readr::read_tsv("data/mtags/all.genus.tsv") %>%
janitor::clean_names() %>%
dplyr::mutate(genus_id = paste0("genus_", as.character(dplyr::row_number())), .before = number_taxpath)
#clear_environment
rm(list = ls())
#load required packages
library(pacman)
pacman::p_load("tidyverse", "readxl", "vegan", "ggpubr","janitor", "ape", "edgeR")
#color palette
colors <- c(rgb(100/255, 170/255, 112/255),
rgb(119/255, 106/255, 105/255),
rgb(210/255, 208/255, 213/255),
rgb(147/255, 213/255, 231/255),
rgb(239/255, 234/255, 183/255),
rgb(234/255, 166/255, 123/255),
rgb(212/255, 191/255, 153/255),
rgb(202/255, 154/255, 129/255))
#import mtags genus level data
mtags_in <- readr::read_tsv("data/mtags/all.genus.tsv") %>%
janitor::clean_names() %>%
dplyr::mutate(genus_id = paste0("genus_", as.character(dplyr::row_number())), .before = number_taxpath)
#create genus table
mtags_genera <- mtags_in %>%
select(-number_taxpath) %>%
tidyr::pivot_longer(-genus_id, names_to = "sample", values_to = "count") %>%
dplyr::mutate(sample = stringr::str_remove(sample, pattern = "_bins") %>%
stringr::str_to_upper()) %>%
tidyr::pivot_wider(names_from = "genus_id", values_from = "count")  %>%
tibble::column_to_rownames(var = "sample")
#create taxonomy tabel
mtags_tax <- mtags_in %>%
dplyr::select(genus_id, number_taxpath) %>%
dplyr::mutate(root = stringr::word(number_taxpath, sep = ";", start = 1, end = 1),
domain = stringr::word(number_taxpath, sep = ";", start = 2, end = 2),
phylum = stringr::word(number_taxpath, sep = ";", start = 3, end = 3),
class = stringr::word(number_taxpath, sep = ";", start = 4, end = 4),
order = stringr::word(number_taxpath, sep = ";", start = 5, end = 5),
family = stringr::word(number_taxpath, sep = ";", start = 6, end = 6),
genus = stringr::word(number_taxpath, sep = ";", start = 7, end = 7)) %>%
dplyr::select(-number_taxpath) %>%
dplyr::mutate(dplyr::across(.cols = !ends_with("_id"), stringr::word, sep = "__", start = 2, end = 2))
mtags_tax[nrow(mtags_tax)-1, ncol(mtags_tax)] <- dplyr::pull(mtags_in, number_taxpath)[nrow(mtags_tax)-1]
mtags_tax[nrow(mtags_tax), ncol(mtags_tax)] <- dplyr::pull(mtags_in, number_taxpath)[nrow(mtags_tax)]
#import sample metadata (based on Serina's code)
sample_metadata <- readxl::read_excel("data/metadata/EcoImpact_Exp1_Exp2_DNA_samples_LC_2_metadata.xlsx") %>%
janitor::clean_names() %>%
dplyr::mutate(sample_perc = dplyr::case_when(grepl("BT", sample_name) ~ paste0("BT_", stringr::word(sample_name, 2, sep = "_")),
TRUE ~ stringr::word(sample_name, 1, sep = "_"))) %>%
dplyr::mutate(timefix = dplyr::case_when(grepl("Week4", time) ~ "D28",  # make times consistent
grepl("Week3", time) ~ "D21",
grepl("Week2", time) ~ "D14",
grepl("Week1", time) ~ "D07",
grepl("Day", time) ~ gsub("Day", "D", time),
TRUE ~ time)) %>%
dplyr::select(sample_code, experiment, sample_type, sample_perc, timefix) %>%
dplyr::filter(sample_code %in% rownames(mtags_genera))
#select only prokaryotes
mtags_tax <- mtags_tax %>%
dplyr::filter(domain %in% c("Bacteria", "Archaea")|genus %in% c("Unassigned", "Unaligned"))
mtags_genera <- mtags_genera %>%
dplyr::select(dplyr::any_of(mtags_tax$genus_id))
#keep exp2 only
sample_metadata <- sample_metadata %>%
dplyr::filter(experiment == "2")
mtags_genera <- mtags_genera %>%
dplyr::filter(rownames(mtags_genera) %in% sample_metadata$sample_code)  %>%
dplyr::select_if(colSums(.) != 0)
mtags_tax <- mtags_tax %>%
dplyr::filter(genus_id %in% colnames(mtags_genera))
#remove unaligned reads if desired
remove_unaligned <- TRUE
if(remove_unaligned == TRUE){
mtags_tax <- mtags_tax %>%
dplyr::filter(genus != "Unaligned")
mtags_genera <- mtags_genera %>%
dplyr::select(dplyr::any_of(mtags_tax$genus_id))
}
#remove unassigned reads if desired
remove_unassigned <- TRUE
if(remove_unassigned == TRUE){
mtags_tax <- mtags_tax %>%
dplyr::filter(genus != "Unassigned")
mtags_genera <- mtags_genera %>%
dplyr::select(dplyr::any_of(mtags_tax$genus_id))
}
#TMM normalization
normalize <- TRUE
#Format as DGElist for normalization
cts <- mtags_genera %>%
t()
grps <- sample_metadata %>%
dplyr::select(sample_code, sample_perc) %>%
arrange(desc(sample_code)) %>%
as.data.frame() %>%
tibble::column_to_rownames("sample_code") %>%
t()
d <- edgeR::DGEList(counts = cts, group = grps)
#normalize using tmm method
d1 <- edgeR::calcNormFactors(d, method = "TMM")
d2 <- edgeR::cpm(d1)
if(normalize == TRUE){
mtags_genera <- d2 %>%
t() %>%
as.data.frame()
}
#perform hellinger transformation if desired
hellinger <- FALSE
if(hellinger == TRUE){
mtags_genera <- mtags_genera %>%
vegan::decostand(method = "hellinger")
}
#perform square root transformation if desired
square_root <- TRUE
if(square_root == TRUE){
mtags_genera <- mtags_genera %>%
dplyr::mutate(across(.cols = everything(), sqrt))
}
#compute distance matrix
dist_method <- "bray"
dist_mat <- mtags_genera %>%
vegan::vegdist(method = dist_method)
#compute pcoa
pcoa <- ape::pcoa(dist_mat)
write_rds(pcoa, "data/mtags_prokaryotes_exp2_pcoa_ape_output.rds")
#create data for plotting pcoa
pcoa_plot_dat <- tibble::tibble(sample = rownames(pcoa$vectors), axis1 = pcoa$vectors[,1], axis2 = pcoa$vectors[,2]) %>%
dplyr::left_join(sample_metadata, by = c("sample" = "sample_code")) %>%
dplyr::mutate(sample_perc = forcats::fct_relevel(sample_perc, c("BT_CB", "BT_WW", "BT_UF", "WW00", "WW30", "WW80", "WW30UF", "WW80UF")),
experiment = as.factor(experiment))
pcoa_plot_dat <- pcoa_plot_dat %>%
dplyr::mutate(domain = rep("Prokaryota", nrow(pcoa_plot_dat)))
readr::write_rds(pcoa_plot_dat, "data/mtags_prokaryotes_exp2_pcoa.rds")
#plot
pcoa_plot <- ggplot2::ggplot(pcoa_plot_dat, aes(x = axis1, y = axis2, color = sample_perc)) +
ggplot2::geom_point() +
ggplot2::stat_ellipse() +
ggplot2::labs(x = paste0("PCoA Axis 1 (", as.character(round(pcoa$values$Relative_eig[1], 4)*100), " %)"), y = paste0("PCoA Axis 2 (", as.character(round(pcoa$values$Relative_eig[2], 4)*100), " %)"), color = "Treatment") +
ggpubr::theme_pubr() +
ggplot2::theme(legend.position = "right") +
ggplot2::scale_color_manual(labels = c("River water", "Wastewater", "Wastewater UF", "0% WW", "30% WW", "80% WW", "30% WW UF", "80% WW UF"), values = colors)
source("C:/Users/schaermi/Documents/AMR-ecoimpact-paper/scripts/figure1.R")
#clear_environment
rm(list = ls())
#color palette
colors <- c(rgb(100/255, 170/255, 112/255),
rgb(119/255, 106/255, 105/255),
rgb(210/255, 208/255, 213/255),
rgb(147/255, 213/255, 231/255),
rgb(239/255, 234/255, 183/255),
rgb(234/255, 166/255, 123/255),
rgb(212/255, 191/255, 153/255),
rgb(202/255, 154/255, 129/255))
#load required packages
library(pacman)
pacman::p_load("tidyverse", "readxl", "vegan", "ggpubr","janitor", "ape", "edgeR")
#import sample metadata (based on Serina's code)
sample_metadata <- readxl::read_excel("data/metadata/EcoImpact_Exp1_Exp2_DNA_samples_LC_2_metadata.xlsx") %>%
janitor::clean_names() %>%
dplyr::mutate(sample_perc = dplyr::case_when(grepl("BT", sample_name) ~ paste0("BT_", stringr::word(sample_name, 2, sep = "_")),
TRUE ~ stringr::word(sample_name, 1, sep = "_"))) %>%
dplyr::mutate(timefix = dplyr::case_when(grepl("Week4", time) ~ "D28",  # make times consistent
grepl("Week3", time) ~ "D21",
grepl("Week2", time) ~ "D14",
grepl("Week1", time) ~ "D07",
grepl("Day", time) ~ gsub("Day", "D", time),
TRUE ~ time)) %>%
dplyr::select(sample_code, experiment, sample_type, sample_perc, timefix)
prokaryotes <- readr::read_rds("data_MS/mtags_prokaryotes_exp2_pcoa_ape_output.rds")
#import sample metadata (based on Serina's code)
sample_metadata <- readxl::read_excel("data/metadata/EcoImpact_Exp1_Exp2_DNA_samples_LC_2_metadata.xlsx") %>%
janitor::clean_names() %>%
dplyr::mutate(sample_perc = dplyr::case_when(grepl("BT", sample_name) ~ paste0("BT_", stringr::word(sample_name, 2, sep = "_")),
TRUE ~ stringr::word(sample_name, 1, sep = "_"))) %>%
dplyr::mutate(timefix = dplyr::case_when(grepl("Week4", time) ~ "D28",  # make times consistent
grepl("Week3", time) ~ "D21",
grepl("Week2", time) ~ "D14",
grepl("Week1", time) ~ "D07",
grepl("Day", time) ~ gsub("Day", "D", time),
TRUE ~ time)) %>%
dplyr::select(sample_code, experiment, sample_type, sample_perc, timefix)
prokaryotes <- readr::read_rds("data/mtags_prokaryotes_exp2_pcoa_ape_output.rds")
deeparg <- readr::read_rds("data/deepargs_pcoa_exp2.rds")
deeparg <- readr::read_rds("data/deepargs_pcoa_exp2.rds")
crustypro <- vegan::procrustes(X = prokaryotes$vectors, Y = deeparg$vectors, symmetric = TRUE)
ctest <- tibble(sample = rownames(crustypro$X),
yrda1 = crustypro$Yrot[,1],
yrda2 = crustypro$Yrot[,2],
xrda1 = crustypro$X[,1],
xrda2 = crustypro$X[,2]) %>%
left_join(sample_metadata, by = c("sample" = "sample_code"))  %>%
dplyr::mutate(sample_perc = forcats::fct_relevel(sample_perc, c("BT_CB", "BT_WW", "BT_UF", "WW00", "WW30", "WW80", "WW30UF", "WW80UF")),
experiment = as.factor(experiment))
plot_gg <- ggplot(ctest) +
#geom_point(aes(x=yrda1, y=yrda2, color = sample_perc), size = 5) +
geom_point(aes(x=xrda1, y=xrda2, color = sample_perc), size = 5) +
geom_segment(aes(x=xrda1,y=xrda2,xend=yrda1,yend=yrda2, color = sample_perc), arrow=arrow(length=unit(0.5,"cm")), linewidth = 1.5) +
theme_pubr() +
ggplot2::theme(legend.position = "right",
legend.text = element_text(size = 28),
legend.title = element_text(size = 32),
strip.text.x = element_text(size = 32, face = "italic"),
axis.title = element_text(size = 32),
axis.text = element_text(size = 28)) +
ggplot2::scale_color_manual(labels = c("River water", "Wastewater", "Wastewater UF", "0% WW", "30% WW", "80% WW", "30% WW UF", "80% WW UF"), values = colors) +
ggplot2::labs(x = "Dimension 1", y = "Dimension 2", color = "Treatment")
source("C:/Users/schaermi/Documents/AMR-ecoimpact-paper/scripts/figure3.R")
rm(list = ls()) #clear data
#load required packages
library(pacman)
pacman::p_load("tidyverse", "readxl", "vegan", "ggpubr","janitor", "ape")
#import mtags genus level data
deepargs_in <- readr::read_csv("data_MS/deeparg_subtype_16S_norm.csv") %>%
janitor::clean_names()
rm(list = ls()) #clear data
#load required packages
library(pacman)
pacman::p_load("tidyverse", "readxl", "vegan", "ggpubr","janitor", "ape")
#import mtags genus level data
deepargs_in <- readr::read_csv("data/deeparg_subtype_16S_norm.csv") %>%
janitor::clean_names()
source("C:/Users/schaermi/Documents/AMR-ecoimpact-paper/scripts/figure3_mtags.R")
#clear_environment
rm(list = ls())
#load required packages
library(pacman)
pacman::p_load("tidyverse", "readxl", "vegan", "ggpubr","janitor", "ape", "edgeR")
#import mtags genus level data
mtags_in <- readr::read_tsv("data/mtags/all.genus.tsv") %>%
janitor::clean_names() %>%
dplyr::mutate(genus_id = paste0("genus_", as.character(dplyr::row_number())), .before = number_taxpath)
#create genus table
mtags_genera <- mtags_in %>%
select(-number_taxpath) %>%
tidyr::pivot_longer(-genus_id, names_to = "sample", values_to = "count") %>%
dplyr::mutate(sample = stringr::str_remove(sample, pattern = "_bins") %>%
stringr::str_to_upper()) %>%
tidyr::pivot_wider(names_from = "genus_id", values_from = "count")  %>%
tibble::column_to_rownames(var = "sample")
#create taxonomy tabel
mtags_tax <- mtags_in %>%
dplyr::select(genus_id, number_taxpath) %>%
dplyr::mutate(root = stringr::word(number_taxpath, sep = ";", start = 1, end = 1),
domain = stringr::word(number_taxpath, sep = ";", start = 2, end = 2),
phylum = stringr::word(number_taxpath, sep = ";", start = 3, end = 3),
class = stringr::word(number_taxpath, sep = ";", start = 4, end = 4),
order = stringr::word(number_taxpath, sep = ";", start = 5, end = 5),
family = stringr::word(number_taxpath, sep = ";", start = 6, end = 6),
genus = stringr::word(number_taxpath, sep = ";", start = 7, end = 7)) %>%
dplyr::select(-number_taxpath) %>%
dplyr::mutate(dplyr::across(.cols = !ends_with("_id"), stringr::word, sep = "__", start = 2, end = 2))
mtags_tax[nrow(mtags_tax)-1, ncol(mtags_tax)] <- dplyr::pull(mtags_in, number_taxpath)[nrow(mtags_tax)-1]
mtags_tax[nrow(mtags_tax), ncol(mtags_tax)] <- dplyr::pull(mtags_in, number_taxpath)[nrow(mtags_tax)]
#import sample metadata (based on Serina's code)
sample_metadata <- readxl::read_excel("data/metadata/EcoImpact_Exp1_Exp2_DNA_samples_LC_2_metadata.xlsx") %>%
janitor::clean_names() %>%
dplyr::mutate(sample_perc = dplyr::case_when(grepl("BT", sample_name) ~ paste0("BT_", stringr::word(sample_name, 2, sep = "_")),
TRUE ~ stringr::word(sample_name, 1, sep = "_"))) %>%
dplyr::mutate(timefix = dplyr::case_when(grepl("Week4", time) ~ "D28",  # make times consistent
grepl("Week3", time) ~ "D21",
grepl("Week2", time) ~ "D14",
grepl("Week1", time) ~ "D07",
grepl("Day", time) ~ gsub("Day", "D", time),
TRUE ~ time)) %>%
dplyr::select(sample_code, experiment, sample_type, sample_perc, timefix) %>%
dplyr::filter(sample_code %in% rownames(mtags_genera))
#select only prokaryotes
mtags_tax <- mtags_tax %>%
dplyr::filter(domain %in% c("Bacteria", "Archaea")|genus %in% c("Unassigned", "Unaligned"))
mtags_genera <- mtags_genera %>%
dplyr::select(dplyr::any_of(mtags_tax$genus_id))
#keep exp2 only
sample_metadata <- sample_metadata %>%
dplyr::filter(experiment == "2")
mtags_genera <- mtags_genera %>%
dplyr::filter(rownames(mtags_genera) %in% sample_metadata$sample_code)  %>%
dplyr::select_if(colSums(.) != 0)
mtags_tax <- mtags_tax %>%
dplyr::filter(genus_id %in% colnames(mtags_genera))
#remove unaligned reads if desired
remove_unaligned <- TRUE
if(remove_unaligned == TRUE){
mtags_tax <- mtags_tax %>%
dplyr::filter(genus != "Unaligned")
mtags_genera <- mtags_genera %>%
dplyr::select(dplyr::any_of(mtags_tax$genus_id))
}
#remove unassigned reads if desired
remove_unassigned <- TRUE
if(remove_unassigned == TRUE){
mtags_tax <- mtags_tax %>%
dplyr::filter(genus != "Unassigned")
mtags_genera <- mtags_genera %>%
dplyr::select(dplyr::any_of(mtags_tax$genus_id))
}
#TMM normalization
normalize <- TRUE
#Format as DGElist for normalization
cts <- mtags_genera %>%
t()
grps <- sample_metadata %>%
dplyr::select(sample_code, sample_perc) %>%
arrange(desc(sample_code)) %>%
as.data.frame() %>%
tibble::column_to_rownames("sample_code") %>%
t()
d <- edgeR::DGEList(counts = cts, group = grps)
#normalize using tmm method
d1 <- edgeR::calcNormFactors(d, method = "TMM")
d2 <- edgeR::cpm(d1)
if(normalize == TRUE){
mtags_genera <- d2 %>%
t() %>%
as.data.frame()
}
#perform hellinger transformation if desired
hellinger <- FALSE
if(hellinger == TRUE){
mtags_genera <- mtags_genera %>%
vegan::decostand(method = "hellinger")
}
#perform square root transformation if desired
square_root <- TRUE
if(square_root == TRUE){
mtags_genera <- mtags_genera %>%
dplyr::mutate(across(.cols = everything(), sqrt))
}
#compute distance matrix
dist_method <- "bray"
dist_mat <- mtags_genera %>%
vegan::vegdist(method = dist_method)
#compute pcoa
pcoa <- ape::pcoa(dist_mat)
write_rds(pcoa, "data/mtags_prokaryotes_exp2_pcoa_ape_output.rds")
source("C:/Users/schaermi/Documents/AMR-ecoimpact-paper/scripts/figure3_mtags.R")
#clear_environment
rm(list = ls())
#load required packages
library(pacman)
pacman::p_load("tidyverse", "readxl", "vegan", "ggpubr","janitor", "ape", "edgeR")
#color palette
colors <- c(rgb(100/255, 170/255, 112/255),
rgb(119/255, 106/255, 105/255),
rgb(210/255, 208/255, 213/255),
rgb(147/255, 213/255, 231/255),
rgb(239/255, 234/255, 183/255),
rgb(234/255, 166/255, 123/255),
rgb(212/255, 191/255, 153/255),
rgb(202/255, 154/255, 129/255))
#import deepargs data
deepargs_in <- readr::read_csv("data_MS/deeparg_subtype_16S_norm.csv") %>%
janitor::clean_names()
#clear_environment
rm(list = ls())
#load required packages
library(pacman)
pacman::p_load("tidyverse", "readxl", "vegan", "ggpubr","janitor", "ape", "edgeR")
#color palette
colors <- c(rgb(100/255, 170/255, 112/255),
rgb(119/255, 106/255, 105/255),
rgb(210/255, 208/255, 213/255),
rgb(147/255, 213/255, 231/255),
rgb(239/255, 234/255, 183/255),
rgb(234/255, 166/255, 123/255),
rgb(212/255, 191/255, 153/255),
rgb(202/255, 154/255, 129/255))
#import deepargs data
deepargs_in <- readr::read_csv("data/deeparg_subtype_16S_norm.csv") %>%
janitor::clean_names()
sample_metadata <- readxl::read_excel("data/metadata/EcoImpact_Exp1_Exp2_DNA_samples_LC_2_metadata.xlsx") %>%
janitor::clean_names() %>%
dplyr::mutate(sample_perc = dplyr::case_when(grepl("BT", sample_name) ~ paste0("BT_", stringr::word(sample_name, 2, sep = "_")),
TRUE ~ stringr::word(sample_name, 1, sep = "_"))) %>%
dplyr::mutate(timefix = dplyr::case_when(grepl("Week4", time) ~ "D28",  # make times consistent
grepl("Week3", time) ~ "D21",
grepl("Week2", time) ~ "D14",
grepl("Week1", time) ~ "D07",
grepl("Day", time) ~ gsub("Day", "D", time),
TRUE ~ time)) %>%
dplyr::select(sample_code, experiment, sample_type, sample_perc, timefix) %>%
dplyr::filter(sample_code %in% deepargs_in$sample)
deepargs <- deepargs_in %>%
as.data.frame() %>%
tibble::column_to_rownames(var = "sample")
#square root transformation
square_root <- TRUE
if(square_root == TRUE){
deepargs <- deepargs %>%
dplyr::mutate(across(.cols = everything(), sqrt))
}
#compute distance matrix
dist_method <- "bray"
dist_mat <- deepargs %>%
vegan::vegdist(method = dist_method)
#compute pcoa
pcoa <- ape::pcoa(dist_mat)
write_rds(pcoa, "data/deepargs_pcoa.rds")
View(pcoa)
#compute PREMANOVA
permanova <- adonis2(dist_mat ~ sample_perc + experiment, sample_metadata, permutations = 999, by = "margin")
View(permanova)
